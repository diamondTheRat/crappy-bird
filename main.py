(reduce := __import__("functools").reduce) and (random := __import__("random")) and (pygame := __import__("pygame")) and (time := __import__("time")) and (WIDTH := 900) and (HEIGHT := 600) and (screen := pygame.display.set_mode((WIDTH, HEIGHT))) and (JUMP := 7) and (velocity := 0) == 0 and globals().update({"berd": pygame.Rect(50, 0, 90, 90)}) or (SPEED := 3) and (globals().update({"pipes": []}) or True) and (reset := lambda: (globals().update({"berd": pygame.Rect(50, 0, 90, 90)}) or True) and (globals().update({"velocity" : 0}) or True) and globals().update({"pipes" : []})) and (GAP := 260) and [((([pipes.append([pygame.Rect(WIDTH - 90 + i * WIDTH / 2, 0, 90, (y := random.randint(0, HEIGHT * 2 / 3))), pygame.Rect(WIDTH - 90 + i * WIDTH / 2, y + GAP, 90, HEIGHT - y - GAP)]) for i in iter(lambda: len(pipes), 3)] or True) and [[((pair.pop(i) and pair.insert(i, pygame.Rect(pipe.left - SPEED, pipe.top, *pipe.size))) or True) for i, pipe in list(enumerate(pair))] and (pair[0].right <= 0 and (pipes.pop(j) and pipes.append([pygame.Rect(WIDTH - 90 + WIDTH / 2, 0, 90, (y := random.randint(0, HEIGHT * 2 / 3))), pygame.Rect(WIDTH - 90 + WIDTH / 2, y + GAP, 90, HEIGHT - y - GAP)]))) for j, pair in list(enumerate(pipes))]) or True) and (time.sleep(0.015) is None) and (velocity := velocity + 0.3) and (berd := pygame.Rect(berd.left, berd.top + velocity, *berd.size)) and ([((event.type == pygame.QUIT and quit()) or (event.type == pygame.KEYUP ^ (pygame.K_a ^ ord("`"))) and ((event.key == pygame.K_SPACE and (velocity := -JUMP)) and True)) for event in pygame.event.get()] or True) and ((((berd.bottom >= HEIGHT or reduce(lambda x, y: berd.colliderect(y[1]) or berd.colliderect(y[0]) or x, pipes, False)) and reset()) or True) and (screen.fill((0, 150, 250)) or True) and [[pygame.draw.rect(screen, (0, 255, 0), pipe) for pipe in pair] for pair in pipes] and (pygame.draw.rect(screen, (255, 255, 255), berd) or True) and pygame.display.flip()) for _ in iter(int, 1)]